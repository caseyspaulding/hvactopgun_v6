@page "/admin/categories"

@using BlogDataAccess
@using BlogDataAccess.Models;
@using HVACTopGun.UI.Services;
@inject IJSRuntime Js
@inject CategoryService CategoryService
@attribute [Authorize]

<div class="mt-40 mx-auto max-w-7xl sm:px-6 lg:px-8">
    <div class="mt-20 grid grid-cols-2 gap-4">
        <h1 class=" font-extrabold text-4xl my-2">Manage Categories</h1>
        <button class="my-2 bg-sky-500 hover:bg-sky-700 text-blue font-bold text-white py-2 px-4 rounded" @onclick="OpenCategoryFormAsync">+ Add New Category</button>
    </div>

    <hr />
    <table class="min-w-full text-left text-sm font-light">
        <thead class="bg-black border-b font-medium dark:border-neutral-500">
            <tr>
                <th scope="col" class="text-white px-6 py-4">#</th>
                <th scope="col" class="text-white px-6 py-4">Id</th>
                <th scope="col" class="text-white px-6 py-4">Name</th>
                <th scope="col" class="text-white px-6 py-4">Slug</th>
                <th scope="col" class="text-white px-6 py-4"></th>
            </tr>
        </thead>
        <tbody>
            @if (_loading)
            {
                <tr class="border-b dark:border-neutral-500">
                    <td colspan="4">
                        Loading categories....
                    </td>
                </tr>
            }
            else if (!_loading && (_categories is null || !_categories.Any()))
            {
                <tr>
                    <td colspan="4">
                        No Categories Found
                    </td>
                </tr>
            }
            else
            {
                int sno = 1;
                foreach (var category in _categories)
                {
                    <tr class="border-b dark:border-neutral-500">
                        <td class="whitespace-nowrap px-6 py-4 font-medium">@sno</td>
                        <td class="whitespace-nowrap px-6 py-4">@category.Id</td>
                        <td class="whitespace-nowrap px-6 py-4">@category.Name</td>
                        <td class="whitespace-nowrap px-6 py-4">@category.Slug</td>
                        <td class="whitespace-nowrap px-6 py-4">
                            <button @onclick="()=> EditCategoryAsync(category)"
                                type="button" 
                                class="bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded">
                                Edit
                            </button>
                           
                        </td>
                    </tr>
                    sno++;
                }
            }
        </tbody>
    </table>

</div>
<dialog id="@_categoryFormDialogId">
    <SaveCategoryForm Category="_categoryModel"
                      OnSaveCategory="OnSaveCategory"
                      OnCloseForm="CloseCategoryFormAsync" />
</dialog>
<style type="text/css">
    dialog {
        padding: 0;
        border: 2px solid var(--color-purple);
    }
</style>

@code {
    private const string _categoryFormDialogId = "category-form";
    private bool _loading = false;
    private IEnumerable<Category>? _categories = null;

    private Category _categoryModel = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
    }

    private async Task LoadCategoriesAsync()
    {
        _loading = true;
        try
        {
            _categories = await CategoryService.GetCategoriesAsync();
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenCategoryFormAsync() =>
        await Js.InvokeVoidAsync("window.openModal", _categoryFormDialogId);

    private async Task CloseCategoryFormAsync()
    {
        _categoryModel = new();
        await Js.InvokeVoidAsync("window.closeModal", _categoryFormDialogId);
    }

    private async Task EditCategoryAsync(Category category)
    {
        _categoryModel = category.Clone();
        await OpenCategoryFormAsync();
    }

    private async Task OnSaveCategory(MethodResult saveCategoryResult)
    {
        if (saveCategoryResult.Status)
        {
            // Category saved successfully
            await AlertAsync("Category saved successfully");
            await LoadCategoriesAsync();
            await CloseCategoryFormAsync();
        }
        else
        {
            // there was some error in saving category
            await AlertAsync(saveCategoryResult.ErrorMessage!);
        }
    }
    private async Task AlertAsync(string message)
    {
        await Js.InvokeVoidAsync("window.alert", message);
    }
}
