@* //Blog detail post page *@
@inject IJSRuntime JSRuntime
@page "/pos/{slug}"
@using HVACTopGun.UI
@using HVACTopGun.UI.Features.Blog
@inject BlogPostService BlogPostService
@inject CategoryService CategoryService
@inject NavigationManager NavManager
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Routing
@using HVACTopGun.UI.Shared

<PageTitle>@post.Title | HVAC Business Academy</PageTitle>

<HeadContent>
    <meta property="og:image" content="@post.HeaderImageUrl" />
    <meta property="og:url" content="https://hvactopgun.com/posts/@post.Slug" />
    <meta property="og:title" content="@post.Title" />
    <meta property="og:description" content="@post.Introduction" />
    <meta property="og:image:alt" content="@post.Title" />
    <meta property="og:type" content="article" />
    <meta property="og:site_name" content="HVAC TopGun" />
    <meta name="twitter:title" content="@post.Title" />
    <meta name="twitter:description" content="@post.Introduction" />
    <meta name="twitter:image" content="@post.HeaderImageUrl" />
    <meta name="twitter:image:alt" content="@post.Title" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@@hvactopgun" />
    <meta name="twitter:creator" content="@@caseyspaulding_" />

    
    
</HeadContent>

<OgData2 Title="@post.Title"
        AbsolutePreviewImageUrl="@post.HeaderImageUrl"
        Description="@post.Introduction"
        Keywords="HVAC TopGun" />

<div class="mt-10 relative isolate overflow-hidden bg-gray-900 px-6 py-20 sm:py-30 lg:px-8">
    <!-- Add this img tag to display the header image of the blog post -->
    @if (!string.IsNullOrWhiteSpace(post.HeaderImageUrl))
    {
     <img src="@post.HeaderImageUrl" alt="@post.Title" class="absolute inset-0 -z-10 h-full w-full object-cover">
    }
    <div class="hidden sm:absolute sm:-top-10 sm:right-1/2 sm:-z-10 sm:mr-10 sm:block sm:transform-gpu sm:blur-3xl" aria-hidden="true">
    </div>


    <div class="mx-auto max-w-2xl text-center">
       
       
       
    </div>
</div>


<div class="mt-20 mx-auto max-w-7xl px-5 py-30 sm:py-25 lg:px-7 lg:py-29">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div class="col-span-2">
            @if (notFound)
            {
                <div class="flex justify-center items-center" style="min-height: 250px">
                    <h3>Not found</h3>
                    <NavLink href="/HVACBusinessAcademy" class="font-bold hover:underline">Click here to see the latest blog posts</NavLink>
                </div>
            }
            else if(post?.Id > 0)
            {
                
                var categoryTitle = $"{post.CategoryName} Blog Posts";
                var categoryPostsLink = $"/c/{post.Category.Slug}/posts";

                <Breadcrumb />
                <div class="text-left md:text-center">
                    <h1 class="text-4xl lg:text-5xl font-extrabold text-black py-5 text-left md:text-center">@post.Title</h1>

                    <div class="flex justify-start md:justify-center space-x-4 py-5">
                    
                    <div class="flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z" />
                            </svg>


                        <p class="text-sm px-1">@post.User.FirstName @post.User.LastName</p>
                        
                    </div>
                    <div class="flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="px-1 w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z" />
                            </svg>

                        <span class="text-sm">@post.PublishedOn!.Value.ToShortDateString()</span>
                    </div>
                        <div class="hidden sm:flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="px-1 w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z" />
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z" />
                            </svg>

                            <NavLink href="@categoryPostsLink" class="text-sm" title="@categoryTitle">@post.CategoryName</NavLink>
                    </div>
                        <div class="hidden sm:flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="px-1 w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.042A8.967 8.967 0 006 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 016 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 016-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0018 18a8.967 8.967 0 00-6 2.292m0-14.25v14.25" />
                            </svg>

                            <NavLink href="@categoryPostsLink" class="px-1 text-sm" title="@categoryTitle">Read Time 3min</NavLink>
                        </div>

                </div>
                 
            </div>

                <hr class="my-4">
                <div class="main-content big-first-letter garamond-font text-xl">
                    @((MarkupString)post.Content)
                </div>
            }
            else
            {
                <p>Fetching blog post...</p>
            }
            <div class="mt-10">
                <Disqus @ref="DisqusComponent"></Disqus>
            </div>
          
        </div>
        <div class="col-span-1">
            <CategoriesBox />
          
        </div>
    </div>
</div>
<style>
    .big-first-letter::first-letter {
        -webkit-initial-letter: 4;
        initial-letter: 4;
        color: #0ea5e9;
        font-weight: bold;
        margin-right: .75em;
    }

    .garamond-font {
        font-family: "Garamond", serif;
    }
</style>


@code {
    [Parameter]
    public string Slug { get; set; }
    private BlogPost post = new();
    private bool notFound = false;
    private Disqus DisqusComponent { get; set; }
    private bool firstRender = true;
    
    public class BreadcrumbItem
    {
        public string Name { get; set; }
        public string Href { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(Slug))
        {
            var dbBlog = await BlogPostService.GetPostBySlugAsync(Slug);
            if (dbBlog is null)
            {
                notFound = true;
            }
            else
            {
                post = dbBlog;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && post != null && DisqusComponent != null)
        {
            var pageUrl = NavigationManager.Uri;
            await DisqusComponent.ReloadComments(pageUrl, Slug);
        }
    }
}
