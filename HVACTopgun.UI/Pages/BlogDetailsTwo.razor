@page "/posts/{slug}"

@using HVACTopGun.UI
@using HVACTopGun.UI.Features.Blog
@inject BlogPostService BlogPostService
@inject CategoryService CategoryService
@inject NavigationManager NavManager
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Routing
@using HVACTopGun.UI.Shared
@inject IJSRuntime JSRuntime


<PageTitle>@post.Title | HVAC Business Academy</PageTitle>

<HeadContent>
    <meta property="og:image" content="@post.HeaderImageUrl" />
    <meta property="og:url" content="https://hvactopgun.com/posts/@post.Slug" />
    <meta property="og:title" content="@post.Title" />
    <meta property="og:description" content="@post.Introduction" />
    <meta property="og:image:alt" content="@post.Title" />

    <meta property="og:type" content="article" />
    <meta property="og:site_name" content="HVAC TopGun" />
    <meta name="twitter:title" content="@post.Title" />
    <meta name="twitter:description" content="@post.Introduction" />
    <meta name="twitter:image" content="@post.HeaderImageUrl" />
    <meta name="twitter:image:alt" content="@post.Title" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@@hvactopgun" />
    <meta name="twitter:creator" content="@@caseyspaulding_" />

</HeadContent>

<OgData2 Title="@post.Title"
        AbsolutePreviewImageUrl="@post.HeaderImageUrl"
        Description="@post.Introduction"
        Keywords="HVAC TopGun" />

<main class="pb-16 lg:pb-24 bg-white dark:bg-gray-900">
    <header class="bg-[url('https://hvactopgun.com/images/blogheader1.jpg')] w-full h-[400px] xl:h-[437px] bg-no-repeat bg-cover bg-center bg-blend-darken relative">
    <div class="absolute top-0 left-0 w-full h-full bg-black bg-opacity-50"></div>
    <div class="absolute top-20 left-1/2 px-4 mx-auto w-full max-w-screen-xl -translate-x-1/2 xl:top-1/2 xl:-translate-y-1/2 xl:px-0">
        <span class="block mb-4 text-gray-300"> <a href="#" class="font-semibold text-white hover:underline"></a></span>
        <h1 class="mb-4 max-w-4xl text-3xl font-extrabold leading-none text-white sm:text-4xl lg:text-5xl">@post.Title</h1>
        <p class="text-lg font-normal text-gray-300">@post.Introduction</p>
    </div>
</header>
  <div class="flex relative z-20 justify-between p-6 -m-36 mx-4 max-w-screen-xl bg-white dark:bg-gray-800 rounded xl:-m-32 xl:p-9 xl:mx-auto">
      <div class="xl:w-[828px] w-full max-w-none format format-sm sm:format-base lg:format-lg format-blue dark:format-invert">
          <div class="flex flex-col lg:flex-row justify-between lg:items-center">
             
           
          </div>
            <div class="big-first-letter text-xl">
                
                    @if (notFound)
                    {
                        <div class="flex justify-center items-center" style="min-height: 250px">
                            <h3>Not found</h3>
                            <NavLink href="/HVACBusinessAcademy" class="font-bold hover:underline">Click here to see the latest blog posts</NavLink>
                        </div>
                    }
                    else if (post?.Id > 0)
                    {

                        var categoryTitle = $"{post.CategoryName} Blog Posts";
                        var categoryPostsLink = $"/c/{post.Category.Slug}/posts";

                        <Breadcrumb />
                        <div class="text-left md:text-start">
                           

                            <div class="flex justify-start md:justify-start space-x-4 py-5">

                                <div class="flex items-center">
                                    


                                    <p class="text-sm px-1">By: @post.User.FirstName @post.User.LastName</p>

                                </div>
                                <div class="flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="px-1 w-6 h-6">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z" />
                                    </svg>

                                    <span class="text-sm">@post.PublishedOn!.Value.ToShortDateString()</span>
                                </div>
                                <div class="hidden sm:flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="px-1 w-6 h-6">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z" />
                                    </svg>

                                    <NavLink href="@categoryPostsLink" class="text-sm" title="@categoryTitle">@post.CategoryName</NavLink>
                                </div>
                                <div class="hidden sm:flex items-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="px-1 w-6 h-6">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.042A8.967 8.967 0 006 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 016 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 016-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0018 18a8.967 8.967 0 00-6 2.292m0-14.25v14.25" />
                                    </svg>

                                    <NavLink href="@categoryPostsLink" class="px-1 text-sm" title="@categoryTitle">Read Time 3min</NavLink>
                                </div>

                            </div>

                        </div>

                        <hr class="my-2">
                        <div style="margin-left: 0;"class="big-first-letter garamond-font text-xl">
                            @((MarkupString)post.Content)
                        </div>
                    }
                    else
                    {
                        <p>Fetching blog post...</p>
                    }
                    <div class="mt-10">
                        <Disqus @ref="DisqusComponent"></Disqus>
                    </div>

                </div>
               
                   

                
            </div>


        <aside class="hidden xl:block" aria-labelledby="sidebar-label">
            <div class="xl:w-[336px] sticky top-20">
                <h3 id="sidebar-label" class="sr-only">Sidebar</h3>
                
                <div class="mb-12">
                   
                    <CategoriesBox/>
                </div>
                <div>
                   <!---------- Placeholder for content ----------->
                </div>
            </div>
        </aside>
            </div>
  
     
      
  
</main>


<Footer />


<style>
  .big-first-letter::first-letter {
    -webkit-initial-letter: 4;
    initial-letter: 4;
    color: #0ea5e9;
    font-weight: bold;
    margin-right: .75em;
        }

 .garamond-font {
  font-family: "Garamond", serif;
        }

    
</style>


@code {
    [Parameter]
    public string Slug { get; set; }
    private BlogPost post = new();
    private bool notFound = false;
    private Disqus DisqusComponent { get; set; }
    private bool firstRender = true;

    public class BreadcrumbItem
    {
        public string Name { get; set; }
        public string Href { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(Slug))
        {
            var dbBlog = await BlogPostService.GetPostBySlugAsync(Slug);
            if (dbBlog is null)
            {
                notFound = true;
            }
            else
            {
                post = dbBlog;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && post != null && DisqusComponent != null)
        {
            var pageUrl = NavigationManager.Uri;
            await DisqusComponent.ReloadComments(pageUrl, Slug);
        }
    }
}
