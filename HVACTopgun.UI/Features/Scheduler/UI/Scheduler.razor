@page "/Scheduler"
@layout Test2
@using HVACTopGun.DataAccess.Features.Appointments;
@using HVACTopGun.Domain.Entities
@using HVACTopGun.Domain.Features.Appointments;
@using HVACTopGun.Domain.Features.Auth;
@using HVACTopGun.Domain.Features.Tenants;
@using HVACTopGun.Services.Features.Appointments;
@using HVACTopGun.Services.Features.Tenants;
@using HVACTopGun.Services.Features.Users;
@using Microsoft.AspNetCore.Http.HttpResults
@using Syncfusion.Blazor.Schedule.Internal
@inject ITenantService TenantDataService
@inject IAppointmentService appointmentService
@inject IUserService UserDataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using Syncfusion.Blazor.Schedule
@inject AuthClaimsModel authClaimsModel

<div class="h-full">
<SfSchedule TValue="AppointmentModel"
            Width="100%" Height="600px"
@bind-SelectedDate="@CurrentDate">
    <ScheduleViews>
        <ScheduleView Option="View.Day"></ScheduleView>
        <ScheduleView Option="View.Week"></ScheduleView>
        <ScheduleView Option="View.WorkWeek"></ScheduleView>
        <ScheduleView Option="View.Month"></ScheduleView>
        <ScheduleView Option="View.Agenda"></ScheduleView>
    </ScheduleViews>
    <ScheduleEvents TValue="AppointmentModel" ActionCompleted="OnActionCompleted"></ScheduleEvents>
    <ScheduleEventSettings TValue="AppointmentModel"
                           DataSource="@DataSource"
                           AllowEditing="true"
                           AllowAdding="true"
                           AllowDeleting="true">
    </ScheduleEventSettings>
</SfSchedule>
</div>

@code {
    private ClaimsPrincipal User { get; set; }
    private string FirstName { get; set; }
    private string CompanyName { get; set; }
    private int? tenantId;
    private int userId;


    DateTime CurrentDate { get; set; } = DateTime.UtcNow;

    List<AppointmentModel> DataSource { get; set; } = new List<AppointmentModel>();
    ScheduleEventSettings<AppointmentModel> AppointmentSettings { get; set; }

    public List<AppointmentModel> allappointments { get; set; } = new List<AppointmentModel>();
    public TenantModel tenantModel;


    public AppointmentModel appointment = new AppointmentModel();
    public AppointmentModel SelectedAppointment { get; set; } = new AppointmentModel();



    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var objectId = authState.User.FindFirstValue("http://schemas.microsoft.com/identity/claims/objectidentifier");
        tenantId = await TenantDataService.GetTenantIdByObjectId(objectId); // Assign the value to the class-level tenantId property
        User = authState.User;
        FirstName = User.FindFirstValue("extension_FirstName");
        CompanyName = User.FindFirstValue("extension_CompanyName");
        userId = await UserDataService.GetUserIdByObjectId(objectId) ?? 0;
        var allappointments = await appointmentService.GetAllAppointments(tenantId ?? 0);
        DataSource = allappointments;
    }

    public async Task OnActionCompleted(Syncfusion.Blazor.Schedule.ActionEventArgs<AppointmentModel> args)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var objectId = authState.User.FindFirstValue("http://schemas.microsoft.com/identity/claims/objectidentifier");

        if (args.ActionType == ActionType.EventCreate)
        {
            var newAppointment = args.AddedRecords.First();
            await appointmentService.CreateAppointment(newAppointment, tenantId ?? 0, userId);
        }

        if (args.ActionType == ActionType.EventChange)
        {
            var updatedAppointment = args.ChangedRecords.First(); // Using args.ChangedRecords instead of appointment
            await appointmentService.UpdateAppointment(updatedAppointment, tenantId ?? 0);
        }

        if (args.ActionType == ActionType.EventRemove)
        {
            Console.WriteLine("Delete appointment code is executed"); // Add logging statement
            int appointmentId = args.DeletedRecords.First().Id; // Get the Id from the deleted records
            await appointmentService.DeleteAppointment(appointmentId, tenantId ?? 0);
        }

        // Refresh the DataSource after any changes
        var allappointments = await appointmentService.GetAllAppointments(tenantId ?? 0);
        DataSource = allappointments;

        // Refresh the Scheduler component
        StateHasChanged();
    }
}
